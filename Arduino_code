#define BLYNK_PRINT Serial

#include <ESP8266_Lib.h>
#include <BlynkSimpleShieldEsp8266.h>
#include <SoftwareSerial.h>
#include <SoftwareSerial.h>
#include "EmonLib.h"

#define ESP8266_BAUD 9600
#define pin_RX 2
#define pin_TX 3
#define token "******"
#define wifi_name "******"
#define wifi_password "******"
#define voltage_sensor A0
#define Termistor A3
#define pin_fan A5

EnergyMonitor emon1;
SoftwareSerial EspSerial(pin_RX, pin_TX); // RX, TX
ESP8266 wifi(&EspSerial);
BlynkTimer timer;

static double Irms;
static int el = 2;//connection_message
static float  el_value[3];//electrical value [0]- voltage, [1]-current, [2]-watt
static int pin__volatge_relay = 8;//was A1
static int R = 10000; //R=10KΩ-Termistor
static int VCC = 5;  //Supply voltage-Termistor
static float RT0 = 10000; // Ω -Termistor
static int B = 3977;    // K-Termistor
static float T0 = 298.15 ; //Temperature T0 from datasheet, conversion from Celsius to kelvin 25 + 273.15 -Termistor
static float RT, VR, ln, TX, VRT, temp;
static bool booli = false;
char auth[] = token;
char ssid[] = wifi_name;
char pass[] = wifi_password;
static float capteur;
static float KW;
static float vout = 0.0;
static float vin = 0.0;
static float R1 = 100000.0;
static float R2 = 10000.0;
static float amp = 0;

void setup()
{
  Serial.begin(ESP8266_BAUD);
  EspSerial.begin(ESP8266_BAUD);
  Blynk.begin(auth, wifi, ssid, pass);//connect to WIfi

  //timer.setInterval(1000L, myTimerEvent);
  emon1.current(1, 111);
  pinMode(pin__volatge_relay, OUTPUT);
  pinMode(voltage_sensor, INPUT);
  pinMode(pin_fan, OUTPUT);
  pinMode(Termistor, INPUT);
  Blynk.run();
  timer.run(); // Initiates BlynkTimer

  connected_to_blynk(el);//Notify blynk connected
  fan_test();//test fan once

}

void loop()
{
  NetStable();//Reconnect Blynk during running
  Measure_electric(pin__volatge_relay, el_value );//Measure electrical sensor-At use(not charge)
  Serial.print(el_value[0]);//current
  Serial.print(" mA ");
  Blynk.virtualWrite(V5, el_value[0]);//blynk app data
  Serial.print(el_value[1]);//voltage
  Serial.print(" V ");
  Blynk.virtualWrite(V6, el_value[1]);//blynk app data
  Serial.print(el_value[2]);//kiloWatt
  Serial.println(" KW");
  Blynk.virtualWrite(V7, el_value[2]);//blynk app data
  delay(2000);
  //thermi_function
  VRT = analogRead(Termistor);              //Acquisition analog value of VRT
  VRT = (5.00 / 1023.00) * VRT;      //Conversion to voltage
  VR = VCC - VRT;
  RT = VRT / (VR / R);               //Resistance of RT
  ln = log(RT / RT0);
  TX = (1 / ((ln / B) + (1 / T0))); //Temperature from thermistor
  TX = TX - 273.15;
  temp = abs(TX);
  Serial.print("Temperature:");
  Serial.println(temp);
  //end thermi function
  Blynk.virtualWrite(V8, temp);//blynk app data
  fani(temp);//cool down the board over 22c
  delay(2000);

}
/*
  void myTimerEvent()
  {
  Blynk.virtualWrite(V5, millis() / 1000);
  }
*/
void connected_to_blynk(int el)
{
  if (el == 2)
  {
    Blynk.notify("SOLARIX ON!");

  }
}

void Measure_electric(int pin__volatge_relay, float el_value[] )
{
  digitalWrite(pin__volatge_relay, 1);//turn relay on
  Irms = emon1.calcIrms(1480);  // Calculate Irms only
  capteur = analogRead(voltage_sensor);//voltage sensor
  amp = Irms * 1000;
  vout = (capteur * 5) / 1024.0;
  vin = vout / (R2 / (R1 + R2));//voltage divider
  KW = vin * amp;
  el_value[0] = amp;
  el_value[1] = vin;
  el_value[2] = KW;
  digitalWrite(pin__volatge_relay, 0);
}


void fan_test()
{

  analogWrite(pin_fan, 0);//wired upsidedown
  Blynk.virtualWrite(V9, 255);
  delay(3000);
  analogWrite(pin_fan, 1024);
  Blynk.virtualWrite(V9, 0);
  delay(1000);
  Serial.println("fan is ok!");
  Blynk.notify("fan is ok!");
}


void fani(float tempre)
{
  if (tempre > 22)
  {
    analogWrite(pin_fan, 0);//fan pullup-turning on
    Blynk.virtualWrite(V9, 255);
  }
  else
  {
    analogWrite(pin_fan, 1024);//turning off
    Blynk.virtualWrite(V9, 0);
  }
}

void NetStable()
{
  while (Blynk.connect() != true) {
    Serial.println(" Reconnect - Internet unstable ");
    Blynk.begin(auth, wifi, ssid, pass);
  }
}

